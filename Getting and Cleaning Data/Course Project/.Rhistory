convictData <- convictData[[1]]
convictData <- data.frame(convictData, stringsAsFactors = FALSE)
names(convictData)[2:3] <- c("OffenderInformation", "LastStatement")
convictData[] <- lapply(convictData, as.character)
convictData[32, 5] <- "RamonTorres"            ## This row included the persons middle name
convictData[47, 5] <- "FrankM"
convictData <- convictData[c(-57,-61),]
convictData$Last.Name <- gsub(", Jr.", "", convictData$Last.Name)
convictData[57,]
convictData[60,]
convictData[61,]
convictData[62,]
url <- "http://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html"
convictData <- readHTMLTable(url, header = T)
convictData <- convictData[[1]]
convictData <- data.frame(convictData, stringsAsFactors = FALSE)
names(convictData)[2:3] <- c("OffenderInformation", "LastStatement")
convictData[] <- lapply(convictData, as.character)
convictData[32, 5] <- "RamonTorres"            ## This row included the persons middle name
convictData[47, 5] <- "FrankM"
convictData <- convictData[c(-57, -62),]
convictData$Last.Name <- gsub(", Jr.", "", convictData$Last.Name)
convictData[57,]
convictData[62,]
convictData[61,]
convictData[60,]
url <- "http://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html"
convictData <- readHTMLTable(url, header = T)
convictData <- convictData[[1]]
convictData <- data.frame(convictData, stringsAsFactors = FALSE)
names(convictData)[2:3] <- c("OffenderInformation", "LastStatement")
convictData[] <- lapply(convictData, as.character)
## Use the first and last names to open the link to each statment and enter in the table
convictData[32, 5] <- "RamonTorres"            ## This row included the persons middle name
convictData[47, 5] <- "FrankM"
convictData <- convictData[c(-57, -61),]
convictData$Last.Name <- gsub(", Jr.", "", convictData$Last.Name)
convictData[57,]
convictData[62,]
convictData[61,]
convictData[60,]
convictData[59,]
convictData <- readHTMLTable(url, header = T)
convictData <- convictData[[1]]
convictData <- data.frame(convictData, stringsAsFactors = FALSE)
names(convictData)[2:3] <- c("OffenderInformation", "LastStatement")
convictData[] <- lapply(convictData, as.character)
## Use the first and last names to open the link to each statment and enter in the table
convictData[32, 5] <- "RamonTorres"            ## This row included the persons middle name
convictData[47, 5] <- "FrankM"
convictData <- convictData[-57,]
convictData <- readHTMLTable(url, header = T)
convictData <- convictData[[1]]
convictData <- data.frame(convictData, stringsAsFactors = FALSE)
names(convictData)[2:3] <- c("OffenderInformation", "LastStatement")
convictData[] <- lapply(convictData, as.character)
## Use the first and last names to open the link to each statment and enter in the table
convictData[32, 5] <- "RamonTorres"            ## This row included the persons middle name
convictData[47, 5] <- "FrankM"
url <- "http://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html"
convictData <- readHTMLTable(url, header = T)
convictData <- convictData[[1]]
convictData <- data.frame(convictData, stringsAsFactors = FALSE)
names(convictData)[2:3] <- c("OffenderInformation", "LastStatement")
convictData[] <- lapply(convictData, as.character)
## Use the first and last names to open the link to each statment and enter in the table
convictData[32, 5] <- "RamonTorres"            ## This row included the persons middle name
convictData[47, 5] <- "FrankM"
convictData <- convictData[which(Last.Name=="Adams" & First.Name=="Timothy"),]
convictData <- convictData[which(convictData$Last.Name=="Adams" & First.Name=="Timothy"),]
convictData <- convictData[which(convictData$Last.Name=="Adams" & convictData$First.Name=="Timothy"),]
convictData <- convictData[which(convictData$Last.Name=="Powell" & convictData$First.Name=="David"),]
convictData$Last.Name <- gsub(", Jr.", "", convictData$Last.Name)
apply(convictData, 1, function(x) getStatement(x))
getStatement <- function(x){
last <- tolower(x[4])
first <- tolower(x[5])
url <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/", last, first, "last.html", sep = "")
print(url)
doc.html = htmlTreeParse(url,useInternal = TRUE)
doc.text = unlist(xpathApply(doc.html, '//p', xmlValue))
lastSt <- grep("Last Statement:", doc.text)
doc.text <- doc.text[-(1:lastSt)]
doc.text = gsub('\\n', ' ', doc.text)
doc.text = paste(doc.text, collapse = ' ')
print(doc.text)
print(paste(last, first, sep=""))
x[3] <- doc.text
}
url <- "http://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html"
convictData <- readHTMLTable(url, header = T)
convictData <- convictData[[1]]
convictData <- data.frame(convictData, stringsAsFactors = FALSE)
names(convictData)[2:3] <- c("OffenderInformation", "LastStatement")
convictData[] <- lapply(convictData, as.character)
## Use the first and last names to open the link to each statment and enter in the table
convictData[32, 5] <- "RamonTorres"            ## This row included the persons middle name
convictData[47, 5] <- "FrankM"
convictData <- convictData[which(convictData$Last.Name=="Adams" & convictData$First.Name=="Timothy"),]
convictData <- readHTMLTable(url, header = T)
convictData <- convictData[[1]]
convictData <- data.frame(convictData, stringsAsFactors = FALSE)
names(convictData)[2:3] <- c("OffenderInformation", "LastStatement")
convictData[] <- lapply(convictData, as.character)
## Use the first and last names to open the link to each statment and enter in the table
convictData[32, 5] <- "RamonTorres"            ## This row included the persons middle name
convictData[47, 5] <- "FrankM"
convictData$Last.Name <- gsub(", Jr.", "", convictData$Last.Name)
convictData <- convictData[-which(convictData$Last.Name=="Adams" & convictData$First.Name=="Timothy"),]
convictData <- convictData[-which(convictData$Last.Name=="Powell" & convictData$First.Name=="David"),]
apply(convictData, 1, function(x) getStatement(x))
convictData <- convictData[-which(convictData$Last.Name=="Samuel" & convictData$First.Name=="Bustamante"),]
convictData <- readHTMLTable(url, header = T)
convictData <- convictData[[1]]
convictData <- data.frame(convictData, stringsAsFactors = FALSE)
names(convictData)[2:3] <- c("OffenderInformation", "LastStatement")
convictData[] <- lapply(convictData, as.character)
## Use the first and last names to open the link to each statment and enter in the table
convictData[32, 5] <- "RamonTorres"            ## This row included the persons middle name
convictData[47, 5] <- "FrankM"
convictData$Last.Name <- gsub(", Jr.", "", convictData$Last.Name)
convictData <- convictData[-which(convictData$Last.Name=="Adams" & convictData$First.Name=="Timothy"),]
convictData <- convictData[-which(convictData$Last.Name=="Powell" & convictData$First.Name=="David"),]
convictData <- convictData[-which(convictData$Last.Name=="Bustamante" & convictData$First.Name=="Samuel"),]
apply(convictData, 1, function(x) getStatement(x))
convictData <- convictData[-which(convictData$Last.Name=="Molsey" & convictData$First.Name=="Kenneth"),]
url <- "http://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html"
convictData <- readHTMLTable(url, header = T)
convictData <- convictData[[1]]
convictData <- data.frame(convictData, stringsAsFactors = FALSE)
names(convictData)[2:3] <- c("OffenderInformation", "LastStatement")
convictData[] <- lapply(convictData, as.character)
## Use the first and last names to open the link to each statment and enter in the table
convictData[32, 5] <- "RamonTorres"            ## This row included the persons middle name
convictData[47, 5] <- "FrankM"
convictData$Last.Name <- gsub(", Jr.", "", convictData$Last.Name)
convictData <- convictData[-which(convictData$Last.Name=="Adams" & convictData$First.Name=="Timothy"),]
convictData <- convictData[-which(convictData$Last.Name=="Powell" & convictData$First.Name=="David"),]
convictData <- convictData[-which(convictData$Last.Name=="Bustamante" & convictData$First.Name=="Samuel"),]
convictData <- convictData[-which(convictData$Last.Name=="Mosley" & convictData$First.Name=="Kenneth"),]
apply(convictData, 1, function(x) getStatement(x))
getStatement <- function(x){
last <- tolower(x[4])
first <- tolower(x[5])
url <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/", last, first, "last.html", sep = "")
print(url)
doc.html = htmlTreeParse(url,useInternal = TRUE)
doc.text = unlist(xpathApply(doc.html, '//p', xmlValue))
lastSt <- grep("Last Statement:", doc.text)
doc.text <- doc.text[-(1:lastSt)]
doc.text = gsub('\\n', ' ', doc.text)
doc.text = paste(doc.text, collapse = ' ')
x[3] <- doc.text
}
getStatement <- function(x){
try(
last <- tolower(x[4])
first <- tolower(x[5])
url <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/", last, first, "last.html", sep = "")
print(url)
doc.html = htmlTreeParse(url,useInternal = TRUE)
doc.text = unlist(xpathApply(doc.html, '//p', xmlValue))
lastSt <- grep("Last Statement:", doc.text)
doc.text <- doc.text[-(1:lastSt)]
doc.text = gsub('\\n', ' ', doc.text)
doc.text = paste(doc.text, collapse = ' ')
x[3] <- doc.text
)
}
getStatement <- function(x){
last <- tolower(x[4])
first <- tolower(x[5])
url <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/", last, first, "last.html", sep = "")
print(url)
try(doc.html = htmlTreeParse(url,useInternal = TRUE))
doc.text = unlist(xpathApply(doc.html, '//p', xmlValue))
lastSt <- grep("Last Statement:", doc.text)
doc.text <- doc.text[-(1:lastSt)]
doc.text = gsub('\\n', ' ', doc.text)
doc.text = paste(doc.text, collapse = ' ')
x[3] <- doc.text
}
apply(convictData, 1, function(x) getStatement(x))
getStatement <- function(x){
last <- tolower(x[4])
first <- tolower(x[5])
url <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/", last, first, "last.html", sep = "")
print(url)
tryCatch({
doc.html = htmlTreeParse(url,useInternal = TRUE)
})
doc.text = unlist(xpathApply(doc.html, '//p', xmlValue))
lastSt <- grep("Last Statement:", doc.text)
doc.text <- doc.text[-(1:lastSt)]
doc.text = gsub('\\n', ' ', doc.text)
doc.text = paste(doc.text, collapse = ' ')
x[3] <- doc.text
}
apply(convictData, 1, function(x) getStatement(x))
getStatement <- function(x){
last <- tolower(x[4])
first <- tolower(x[5])
url <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/", last, first, "last.html", sep = "")
print(url)
tryCatch({
doc.html = htmlTreeParse(url,useInternal = TRUE)
}, warning = function(w) {
warning-handler-code
}, error = function(e) {
error-handler-code
}, finally = {
cleanup-code
})
doc.text = unlist(xpathApply(doc.html, '//p', xmlValue))
lastSt <- grep("Last Statement:", doc.text)
doc.text <- doc.text[-(1:lastSt)]
doc.text = gsub('\\n', ' ', doc.text)
doc.text = paste(doc.text, collapse = ' ')
x[3] <- doc.text
}
apply(convictData, 1, function(x) getStatement(x))
getStatement <- function(x){
last <- tolower(x[4])
first <- tolower(x[5])
url <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/", last, first, "last.html", sep = "")
print(url)
tryCatch({
doc.html = htmlTreeParse(url,useInternal = TRUE)
}, warning = function(w) {
warning-handler-code
}, error = function(e) {
error-handler-code
}, finally = {
print("Hi")
})
doc.text = unlist(xpathApply(doc.html, '//p', xmlValue))
lastSt <- grep("Last Statement:", doc.text)
doc.text <- doc.text[-(1:lastSt)]
doc.text = gsub('\\n', ' ', doc.text)
doc.text = paste(doc.text, collapse = ' ')
x[3] <- doc.text
}
apply(convictData, 1, function(x) getStatement(x))
convictData <- convictData[-which(convictData$Last.Name=="Martinez" & convictData$First.Name=="David"),]
url <- "http://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html"
convictData <- readHTMLTable(url, header = T)
convictData <- convictData[[1]]
convictData <- data.frame(convictData, stringsAsFactors = FALSE)
names(convictData)[2:3] <- c("OffenderInformation", "LastStatement")
convictData[] <- lapply(convictData, as.character)
## Use the first and last names to open the link to each statment and enter in the table
convictData[32, 5] <- "RamonTorres"            ## This row included the persons middle name
convictData[47, 5] <- "FrankM"
convictData$Last.Name <- gsub(", Jr.", "", convictData$Last.Name)
convictData <- convictData[-which(convictData$Last.Name=="Adams" & convictData$First.Name=="Timothy"),]
convictData <- convictData[-which(convictData$Last.Name=="Powell" & convictData$First.Name=="David"),]
convictData <- convictData[-which(convictData$Last.Name=="Bustamante" & convictData$First.Name=="Samuel"),]
convictData <- convictData[-which(convictData$Last.Name=="Mosley" & convictData$First.Name=="Kenneth"),]
convictData <- convictData[-which(convictData$Last.Name=="Martinez" & convictData$First.Name=="David"),]
## Get a table containing metadata regarding each last statement
library(XML)
url <- "http://www.tdcj.state.tx.us/death_row/dr_executed_offenders.html"
convictData <- readHTMLTable(url, header = T)
convictData <- convictData[[1]]
convictData <- data.frame(convictData, stringsAsFactors = FALSE)
names(convictData)[2:3] <- c("OffenderInformation", "LastStatement")
convictData[] <- lapply(convictData, as.character)
convictData
head(convictData)
last <- "Vasquez"
first <- "Manuel"
url <- paste("http://www.tdcj.state.tx.us/death_row/dr_info/", last, first, "last.html", sep = "")
print(url)
doc.html = htmlTreeParse(url,useInternal = TRUE)
activityData <- read.csv("C:/Data/Coursera/activity.csv")
activityData <- read.csv("C:/Data/Coursera/Reproducible Research/activity.csv")
library(plyr)
totalStepsDay<- ddply(activityData,~date,summarise,sum=sum(steps))
hist(totalStepsDay$sum, breaks=5, xlab="Total number of steps taken each day", col="red")
ddply(totalStepsDay,~date,summarise,mean=mean(sum),median=median(sum))
totalStepsInterval<- ddply(activityData,~interval,summarise,mean=mean(steps, na.rm = TRUE))
plot(x=totalStepsInterval$interval, y=totalStepsInterval$mean, xlab="5 minute intervals", ylab="Average frequency per day", type="l")
totalStepsInterval[which.max(totalStepsInterval$mean), 1]
sum(is.na(activityData$steps))
completeData <- activityData
naIndices <- which(is.na(completeData$steps))
for (i in naIndices) {
completeData$steps[i] <- with(totalStepsInterval, mean[interval == completeData$interval[i]])
}
head(activityData)
head(completeData)
totalStepsDayComplete<- ddply(completeData,~date,summarise,sum=sum(steps))
hist(totalStepsDayComplete$sum, breaks=5, xlab="Total number of steps taken each day", col="blue")
library(timeDate)
install.packages("timedate")
install.packages("timeDate")
library(timeDate)
completeData$isWeekday <- isWeekday(completeData$date, wday=1:5)
library(ggplot2)
averages <- aggregate(steps ~ interval + isWeekday, data=completeData, mean)
averages$isWeekday <- gsub("TRUE", "Weekday", averages$isWeekday)
averages$isWeekday <- gsub("FALSE", "Weekend", averages$isWeekday)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(isWeekday ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
## Pre-a) Load required packages
library(data.table)
library(reshape2)
library(knitr)
## Pre-b) Set and get the working directory
setwd("C:/Data/Coursera/Getting and Cleaning Data/Course Project/Data")
path <- getwd()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileName <- "gcdData.zip"
download.file(url, file.path(path, fileName))
## 1-b) Unzip the data
executable <- file.path("C:", "Program Files", "7-Zip", "7z.exe")
parameters <- "x"
cmd <- paste(paste0("\"", executable, "\""), parameters, paste0("\"", file.path(path, fileName), "\""))
system(cmd)
executable <- file.path("C:", "Program Files", "7-Zip", "7z.exe")
parameters <- "x"
cmd <- paste(paste0("\"", executable, "\""), parameters, paste0("\"", file.path(path, fileName), "\""))
system(cmd)
setwd("C:/Data/Coursera/Getting and Cleaning Data/Course Project")
path <- getwd()
executable <- file.path("C:", "Program Files", "7-Zip", "7z.exe")
parameters <- "x"
cmd <- paste(paste0("\"", executable, "\""), parameters, paste0("\"", file.path(path, fileName), "\""))
system(cmd)
setwd("C:/Data/Coursera/Getting and Cleaning Data/Course Project")
path <- getwd()
## 1-a) Download the required dataset
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileName <- "gcdData.zip"
download.file(url, file.path(path, fileName))
pathIn <- file.path(path, "UCI HAR Dataset")
subjectTrain <- fread(file.path(pathIn, "train", "subject_train.txt"))
subjectTest  <- fread(file.path(pathIn, "test" , "subject_test.txt" ))
activityTrain <- fread(file.path(pathIn, "train", "Y_train.txt"))
activityTest  <- fread(file.path(pathIn, "test" , "Y_test.txt" ))
training <- read.table(file.path(pathIn, "train", "X_train.txt"))
training <- data.table(training)
test <- read.table(file.path(pathIn, "test", "X_test.txt"))
test <- data.table(test)
names(subjectTest)
subjectTest
subjectTrain
activityTrain
## 3-a) Merge the tables
subject <- rbind(subjectTrain, subjectTest)
subject
unique(subjectTrain)
length(unique(subjectTrain))
unique(subjectTest)
setnames(subject, "V1", "subject")
activity <- rbind(activityTrain, activityTest)
setnames(activity, "V1", "activityNumber")
data <- rbind(training, test)
## 3-b) Merge the columns and set the key for the dataset
subject <- cbind(subject, activity)
subject
subject <- rbind(subjectTrain, subjectTest)
setnames(subject, "V1", "subject")
activity <- rbind(activityTrain, activityTest)
setnames(activity, "V1", "activityNumber")
data <- rbind(training, test)
## 3-b) Merge the columns and set the key for the dataset
subjectActivity <- cbind(subject, activity)
data <- cbind(subjectActivity, data)
setkey(data, subjectActivity, activityNumber)
setkey(data, subject, activityNumber)
data
data$subject
head(data$subject)
head(data$activityNumber)
head(activity)
data$activityNumber
features <- fread(file.path(pathIn, "features.txt"))
setnames(features, names(features), c("featureNumber", "featureName"))
features
features$featureDataCode <- features[, paste0("V", featureNumber)]
features <- features[grepl("mean\\(\\)|std\\(\\)", featureName)]
## 4-c) Adds a column that corresponds the features to the column headers in teh data set
features$featureDataCode <- features[, paste0("V", featureNumber)]
setwd("C:/Data/Coursera/Getting and Cleaning Data/Course Project")
path <- getwd()
## 1-a) Download the required dataset
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
fileName <- "gcdData.zip"
download.file(url, file.path(path, fileName))
executable <- file.path("C:", "Program Files", "7-Zip", "7z.exe")
parameters <- "x"
cmd <- paste(paste0("\"", executable, "\""), parameters, paste0("\"", file.path(path, fileName), "\""))
system(cmd)
system(cmd)
pathIn <- file.path(path, "UCI HAR Dataset")
subjectTrain <- fread(file.path(pathIn, "train", "subject_train.txt"))
subjectTest  <- fread(file.path(pathIn, "test" , "subject_test.txt" ))
## 2-b) Read the activity files
activityTrain <- fread(file.path(pathIn, "train", "Y_train.txt"))
activityTest  <- fread(file.path(pathIn, "test" , "Y_test.txt" ))
## 2-c) Read the data
training <- read.table(file.path(pathIn, "train", "X_train.txt"))
training <- data.table(training)
test <- read.table(file.path(pathIn, "test", "X_test.txt"))
test <- data.table(test)
## 3-a) Merge the tables
subject <- rbind(subjectTrain, subjectTest)
setnames(subject, "V1", "subject")
activity <- rbind(activityTrain, activityTest)
setnames(activity, "V1", "activityNumber")
data <- rbind(training, test)
## 3-b) Merge the data, subject & activity columns and set the key for the dataset
subjectActivity <- cbind(subject, activity)
data <- cbind(subjectActivity, data)
setkey(data, subject, activityNumber)
names(data)
## 4-a) Read the features file
features <- fread(file.path(pathIn, "features.txt"))
features
setnames(features, names(features), c("featureNumber", "featureName"))
features
## 4-b) Subset all features containing the mean and the standard deviation
nrow(features)
features <- features[grepl("mean\\(\\)|std\\(\\)", featureName)]
nrow(features)
features$featureDataCode <- features[, paste0("V", featureNumber)]
## 4-d) Subset these variables using variable names.
key(data)
select <- c(key(data), features$featureDataCode)
select
features
data <- data[, select, with=FALSE]
data
## 5-a) Read activity labels that provide descriptive names for each different activity
## 5-a) Read activity labels that provide descriptive names for each different activity
activityNames <- fread(file.path(pathIn, "activity_labels.txt"))
activityNames
setnames(activityNames, names(activityNames), c("activityNumber", "activityName"))
## 5-b) Merge the data and activity names and set the key
data <- merge(data, activityNames, by="activityNumber", all.x=TRUE)
setkey(data, subject, activityNumber, activityName)
## 5-c) The melt function allows each row to be narrower as each measurement now has its own row
data <- data.table(melt(data, key(data), variable.name="featureDataCode"))
data
data <- merge(data, features[, list(featureNumber, featureDataCode, featureName)], by="featureDataCode", all.x=TRUE)
data
data$activity <- factor(data$activityName)
data$feature <- factor(data$featureName)
## 5-f) Seperate all of the features in the feature name variable
data
grepl("Jerk", data$feature)
data$featJerk <- factor(grepl("Jerk", data$feature), labels=c(NA, "Jerk"))
data
data$featMagnitude <- factor(grepl("Mag", data$feature), labels=c(NA, "Magnitude"))
## Features with 2 categories
n <- 2
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepl("^t", data$feature), grepl("^f", data$feature)), ncol=nrow(y))
data$featDomain <- factor(x %*% y, labels=c("Time", "Freq"))
x <- matrix(c(grepl("Acc", data$feature), grepl("Gyro", data$feature)), ncol=nrow(y))
data$featInstrument <- factor(x %*% y, labels=c("Accelerometer", "Gyroscope"))
x <- matrix(c(grepl("BodyAcc", data$feature), grepl("GravityAcc", data$feature)), ncol=nrow(y))
data$featAcceleration <- factor(x %*% y, labels=c(NA, "Body", "Gravity"))
x <- matrix(c(grepl("mean()", data$feature), grepl("std()", data$feature)), ncol=nrow(y))
data$featVariable <- factor(x %*% y, labels=c("Mean", "SD"))
## Features with 3 categories
n <- 3
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepl("-X", data$feature), grepl("-Y", data$feature), grepl("-Z", data$feature)), ncol=nrow(y))
data$featAxis <- factor(x %*% y, labels=c(NA, "X", "Y", "Z"))
data
setkey(data, subject, activity, featDomain, featAcceleration, featInstrument, featJerk, featMagnitude, featVariable, featAxis)
dataTidy <- data[, list(count = .N, average = mean(value)), by=key(data)]
## 6-b) Save the tidy dataset in a new file
dataFile <- file.path(path, "SamsungTidyDataset.txt")
write.table(dataTidy, dataFile, quote=FALSE, sep="\t", row.names=FALSE)
## 6-c) Create the codebook for upload (must go up one directory for the required r markdown file)
setwd("C:/Data/Coursera/Getting and Cleaning Data/Course Project")
knit("codeBookTemplate.rmd", output="codebook.md", encoding="ISO8859-1", quiet=TRUE)
knit("codeBookTemplate.rmd", output="codebook.md", encoding="ISO8859-1", quiet=TRUE)
knit("codeBookTemplate.Rmd", output="codebook.md", encoding="ISO8859-1", quiet=TRUE)
setwd("C:/Users/IBM_ADMIN/Git/data-science-coursera/Getting and Cleaning Data/Course Project/")
knit("codeBookTemplate.rmd", output="codebook.md", encoding="ISO8859-1", quiet=TRUE)
markdownToHTML("codebook.md", "codebook.html")
install.packages("markdown")
library(markdown)
markdownToHTML("codebook.md", "codebook.html")
knit("codeBookTemplate.rmd", output="codebook.md", encoding="ISO8859-1", quiet=TRUE)
markdownToHTML("codebook.md", "codebook.html")
str(dataTidy)
knit("codeBookTemplate.rmd", output="codebook.md", encoding="ISO8859-1", quiet=TRUE)
markdownToHTML("codebook.md", "codebook.html")
setwd("C:/Users/IBM_ADMIN/Git/data-science-coursera/Getting and Cleaning Data/Course Project/")
knit("codeBookTemplate.rmd", output="codebook.md", encoding="ISO8859-1", quiet=TRUE)
markdownToHTML("codebook.md", "codebook.html")
setwd("C:/Users/IBM_ADMIN/Git/data-science-coursera/Getting and Cleaning Data/Course Project/")
dataFile <- file.path(path, "SamsungTidyDataset.txt")
write.table(dataTidy, dataFile, quote=FALSE, sep="\t", row.names=FALSE)
## 6-c) Create the codebook for upload
library(markdown)
knit("codeBookTemplate.rmd", output="codebook.md", encoding="ISO8859-1", quiet=TRUE)
markdownToHTML("codebook.md", "codebook.html")
setwd("C:/Users/IBM_ADMIN/Git/data-science-coursera/Getting and Cleaning Data/Course Project/")
path <- getwd()
dataFile <- file.path(path, "SamsungTidyDataset.txt")
write.table(dataTidy, dataFile, quote=FALSE, sep="\t", row.names=FALSE)
## 6-c) Create the codebook for upload
library(markdown)
knit("codeBookTemplate.rmd", output="codebook.md", encoding="ISO8859-1", quiet=TRUE)
markdownToHTML("codebook.md", "codebook.html")
as.character(Sys.time())
